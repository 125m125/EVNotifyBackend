/**
 * @file modules/logs/index.js
 * @author GPlay97
 * @description Module for drives and charging logs
 */
const db = require('./../db');
const token = require('./../token');
const srv_config = require('./../../srv_config.json');
const srv_errors = require('./../../srv_errors.json');
const util = require('util');
const query = util.promisify(db.query);

/**
 * Creates manual log for given log object
 * @param {String} akey the AKey
 * @param {Object} log the log object containing details of log entry
 */
const createLog = async (akey, log) => {
    try {
        return query('INSERT INTO logs (akey, start, end, charge, autogenerated, title) VALUES (?, ?, ?, ?, ?)', [
            akey, log.start, log.end, log.charge, 0, log.title
        ]);
    } catch (err) {
        return err;
    }
};

/**
 * Retrieves logs for given AKey
 * @param {String} akey the AKey
 * @param {Boolean} charge selects charges or drives only
 * @return {Array} Array of logs
 */
const getLogs = async (akey, charge) => {
    try {
        return query('SELECT * FROM logs WHERE akey=? AND charge=? ORDER BY start', [akey, charge]);
    } catch (err) {
        return err;
    }
};

module.exports = {
    /**
     * createLog request handler
     * @param {Object} req the server request
     * @param {Object} res the server response
     */
    createLog: (req, res) => {
        // check required params TODO: validate title, start and end (and also validate if start smaller than end and end not newer than now)
        if (!req.body.akey || !req.body.token || typeof req.body.log !== 'object' || req.body.log == null || !req.body.log.title || !req.body.log.start || !req.body.log.end) {
            return res.status(400).json({
                error: srv_errors.INVALID_PARAMETERS
            });
        }
        token.validateToken(req.body.akey, req.body.token, (err, valid) => {
            if (!err) {
                if (valid) {
                    // create the log
                    createLog(req.body.akey, req.body.log).then(res => res.json({
                        created: true
                    })).catch(err => {
                        res.status(422).json({
                            error: srv_errors.UNPROCESSABLE_ENTITY,
                            debug: ((srv_config.DEBUG) ? err : null)
                        });
                    });
                } else {
                    // invalid token
                    res.status(401).json({
                        error: srv_errors.INVALID_TOKEN
                    });
                }
            } else {
                res.status(422).json({
                    error: srv_errors.UNPROCESSABLE_ENTITY,
                    debug: ((srv_config.DEBUG) ? err : null)
                });
            }
        });
    },
    /**
     * getLogs request handler
     * @param {Object} req the server request
     * @param {Object} res the server response
     */
    getLogs: (req, res) => {
        // check required params
        if (!req.query.akey || !req.query.token) {
            return res.status(400).json({
                error: srv_errors.INVALID_PARAMETERS
            });
        }
        // validate token
        token.validateToken(req.query.akey, req.query.token, (err, valid) => {
            if (!err) {
                if (valid) {
                    // retrieve the logs
                    getLogs(req.query.akey, (parseInt(req.query.charge) === 1)).then(logs => res.json(logs)).catch(err => {
                        res.status(422).json({
                            error: srv_errors.UNPROCESSABLE_ENTITY,
                            debug: ((srv_config.DEBUG) ? err : null)
                        });
                    });
                } else {
                    // invalid token
                    res.status(401).json({
                        error: srv_errors.INVALID_TOKEN
                    });
                }
            } else {
                res.status(422).json({
                    error: srv_errors.UNPROCESSABLE_ENTITY,
                    debug: ((srv_config.DEBUG) ? err : null)
                });
            }
        });
    }
};